#!/bin/bash

# heavily inspired by NOvAs ups product making script
# 2022-07-12

path=/grid/fermiapp/products/dune/

# print usage
usage() {

  echo ""
  echo "Usage is:" 
  echo "   sh make_dune_plot_style_ups_product.sh <version_number> [install dir]"
  echo ""
  echo "The <version number> should be of the form vXX_XX."
  echo "The optional [install dir] defaults to '$path'."
  echo ""
  exit 1

}

# setup
# -----------------------------------------------------------------------------

if [ ${#@} -lt 1 ] || [ ${#@} -gt 2 ]; then
  usage
fi 

# useful vars
reponame="dune_plot_style"
version=$1
if [ -n "$2" ]; then path="$2"; fi

if [[ ! ${version} =~ v[0-9][0-9]_[0-9][0-9] ]]; then
  echo ""
  echo "Version pattern not allowed."
  usage
fi

if ! [ -d "$path" ]; then
  echo ""
  echo "Requested install directory does not exist: '$path'"
  usage
fi

tmpdir="$(mktemp --directory /tmp/${reponame}_${version}.XXXXXXXXXX)"

echo "Tagging ${reponame} ${version}"
echo "workdir: ${tmpdir}"

if [[ $SETUP_UPS =~ .*products/dune ]]; then
  # UPS is already set up, likely correctly
  pass
elif [ -f /grid/fermiapp/products/dune/setup_dune.sh ]; then
  source /grid/fermiapp/products/dune/setup_dune.sh
elif [ -f /cvmfs/dune.opensciencegrid.org/products/dune/setup_dune.sh ]; then
  source /cvmfs/dune.opensciencegrid.org/products/dune/setup_dune.sh
else
  echo "Can't set up DUNE UPS products!"
  echo "Ensure setup_dune.sh is accessible either in /grid/fermiapp/products/dune or /cvmfs/dune.opensciencegrid.org/products/dune."
  echo "Can't continue."
  exit 1
fi

echo "Printing active products"
echo "-------------------------------------------"
ups active
echo "-------------------------------------------"


# pull the latest version of the git repo and put it in the product directory
# -----------------------------------------------------------------------------

# clone to temp directory
preorg_dir="${tmpdir}/${reponame}-preorg"
git clone -b ${version} git@github.com:DUNE/${reponame}.git ${preorg_dir}

# the exported CMake package files need to be autogenerated by running CMake
if which cmake > /dev/null 2>&1; then
  builddir="$(mktemp --directory ${tmpdir}/cmake-build.XXXXXXXXXX)"

  echo "Running CMake to generate CMake package files."
  echo "Build directory: $builddir"

  pushd $builddir || exit 1
  cmake -DCMAKE_INSTALL_PREFIX=${preorg_dir} ${preorg_dir} || exit 1
  make install || exit 1
  popd || exit 1
  echo
  echo -e "\033[1;33mNOTE:\033[0m If you do not have an installation of ROOT set up in this shell,"
  echo    "      You may have seen warnings in the CMake output above about its absence."
  echo    "      ROOT is not needed for the UPS package construction and installation to succeed,"
  echo    "      and those warnings can be ignored."
else
  echo -e "\033[1;33mWARNING:\033[0m CMake is not available, so the CMake interface will not be installed.  Check that's what you expected!"
fi

# need to do some reogranising for the ups product
mkdir -p ${tmpdir}/${reponame}/python/dunestyle/matplotlib
mkdir -p ${tmpdir}/${reponame}/python/dunestyle/root
mv ${preorg_dir}/src/matplotlib/stylelib  ${tmpdir}/${reponame}/
mv ${preorg_dir}/src/root/cpp/include     ${tmpdir}/${reponame}/
mv ${preorg_dir}/src/__init__.py          ${tmpdir}/${reponame}/python/dunestyle/
mv ${preorg_dir}/src/matplotlib/python/*  ${tmpdir}/${reponame}/python/dunestyle/matplotlib
mv ${preorg_dir}/src/root/python/*        ${tmpdir}/${reponame}/python/dunestyle/root
mv ${preorg_dir}/examples                 ${tmpdir}/${reponame}/
mv ${preorg_dir}/ups/                     ${tmpdir}/${reponame}/
mv ${preorg_dir}/share/                   ${tmpdir}/${reponame}/
rm -rf ${preorg_dir}

proddir=${path}/${reponame}
dest=${proddir}/${version}

echo
echo "$reponame will be created in $dest"

if [ ! -d "${proddir}" ]; then
  mkdir -p ${proddir}
fi

# offer option to overwrite a product if it exists, though
# in general we won't want to do this
if [ -d "${proddir}/${version}" ]; then
  echo ""
  echo -e "\033[1;33mWARNING: Product '${reponame}' with version '${version}' already exists.\033[0m"
  echo "Making it again will over-write the existing one."
  echo ""
  read -p "Are you sure you want to proceed (y/n)? " -n 1 -r
  echo   
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo "OK. If you say so."
  else
    echo "The script will now abort. Try again with a different version."
    exit -1
  fi
fi

# now copy the code to it's location in the target area
mkdir -p ${dest}
rsync --exclude '*~' --exclude '*.git' -rL $tmpdir/${reponame}/* ${dest}

# make sure all the permissions make sense
find ${dest} -type d -exec chmod go+rx {} \;
find ${dest} -type f -exec chmod go+r {} \;

# update the ups table to give the correct version number
ups_table=${dest}/ups/${reponame}.table
if [ ! -f "${ups_table}" ] ; then
  echo ""
  echo "Error! UPS table ${ups_table} does not exist!"
  echo ""
  exit -1
fi

echo "Updating table file"

sed -i -e "s:XXVERSIONXX:${version}:" \
  ${ups_table}

echo
echo "Declaring product ${reponame} with version ${version} to UPS:"

# declare to ups
cmd="ups declare -f NULL -z ${path} -c -r ${path}/${reponame}/${version} -m ${path}/${reponame}/${version}/ups/${reponame}.table ${reponame} ${version}"
echo "$cmd"
eval $cmd

retval=$?
test $retval -ne 0 && echo "Error! 'ups declare' returned non-zero - BAILING" && exit 1

echo "UPS declare succeeded."
echo
echo -e "\033[1;33mWARNING\033[0m: If you intend to relocate this installation to another install area (e.g., /cvmfs),"
echo     "         you will need to edit the '${proddir}/${version}.version' file"
echo     "         to point to the new location after relocation, or UPS will not find the package."

rm -rf ${tmpdir}

echo
echo "Finished successfully.  Bye!"
